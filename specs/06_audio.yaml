# Audio System Functions
# Sound, music, and audio stream functions
# Following best practices: proper audio handling

functions:
  # === AUDIO DEVICE ===
  - name: INITAUDIODEVICE
    raylib_name: InitAudioDevice
    args: []
    ret: void
    category: audio
    description: "Initialize audio device and context"
    working: true

  - name: CLOSEAUDIODEVICE
    raylib_name: CloseAudioDevice
    args: []
    ret: void
    category: audio
    description: "Close audio device and context"
    working: true

  - name: ISAUDIODEVICEREADY
    raylib_name: IsAudioDeviceReady
    args: []
    ret: bool
    category: audio
    description: "Check if audio device is ready"
    working: true

  - name: SETMASTERVOLUME
    raylib_name: SetMasterVolume
    args: [float]
    ret: void
    category: audio
    description: "Set master volume (0.0f to 1.0f)"
    working: true

  # === SOUND FUNCTIONS ===
  - name: LOADSOUND
    raylib_name: LoadSound
    args: [string]
    ret: sound
    category: audio
    description: "Load sound from file"
    working: true
    custom_body: "LoadSound(args[0].as_string().c_str())"

  - name: LOADSOUNDFROMWAVE
    raylib_name: LoadSoundFromWave
    args: [int]
    ret: sound
    category: audio
    description: "Load sound from wave data (pass wave ID)"
    working: true
    custom_body: "LoadSoundFromWave(*(Wave*)args[0].as_int())"

  - name: UPDATESOUND
    raylib_name: UpdateSound
    args: [int, string, int]
    ret: void
    category: audio
    description: "Update sound buffer with new data (pass sound ID, data, sampleCount)"
    working: true
    custom_body: "UpdateSound(*(Sound*)args[0].as_int(), args[1].as_string().c_str(), args[2].as_int())"

  - name: UNLOADSOUND
    raylib_name: UnloadSound
    args: [int]
    ret: void
    category: audio
    description: "Unload sound from memory (pass sound ID)"
    working: true
    custom_body: "UnloadSound(*(Sound*)args[0].as_int())"

  - name: PLAYSOUND
    raylib_name: PlaySound
    args: [int]
    ret: void
    category: audio
    description: "Play a sound (pass sound ID)"
    working: true
    custom_body: "PlaySound(*(Sound*)args[0].as_int())"

  - name: STOPSOUND
    raylib_name: StopSound
    args: [int]
    ret: void
    category: audio
    description: "Stop playing a sound (pass sound ID)"
    working: true
    custom_body: "StopSound(*(Sound*)args[0].as_int())"

  - name: PAUSESOUND
    raylib_name: PauseSound
    args: [int]
    ret: void
    category: audio
    description: "Pause a sound (pass sound ID)"
    working: true
    custom_body: "PauseSound(*(Sound*)args[0].as_int())"

  - name: RESUMESOUND
    raylib_name: ResumeSound
    args: [int]
    ret: void
    category: audio
    description: "Resume a paused sound (pass sound ID)"
    working: true
    custom_body: "ResumeSound(*(Sound*)args[0].as_int())"

  - name: ISSOUNDPLAYING
    raylib_name: IsSoundPlaying
    args: [int]
    ret: bool
    category: audio
    description: "Check if a sound is currently playing (pass sound ID)"
    working: true
    custom_body: "IsSoundPlaying(*(Sound*)args[0].as_int())"

  - name: SETSOUNDVOLUME
    raylib_name: SetSoundVolume
    args: [int, float]
    ret: void
    category: audio
    description: "Set volume for a sound (0.0f to 1.0f, pass sound ID)"
    working: true
    custom_body: "SetSoundVolume(*(Sound*)args[0].as_int(), args[1].as_number())"

  - name: SETSOUNDPITCH
    raylib_name: SetSoundPitch
    args: [int, float]
    ret: void
    category: audio
    description: "Set pitch for a sound (1.0f = normal speed, pass sound ID)"
    working: true
    custom_body: "SetSoundPitch(*(Sound*)args[0].as_int(), args[1].as_number())"

  # === MUSIC FUNCTIONS ===
  - name: LOADMUSICSTREAM
    raylib_name: LoadMusicStream
    args: [string]
    ret: music
    category: audio
    description: "Load music stream from file"
    working: true
    custom_body: "LoadMusicStream(args[0].as_string().c_str())"

  - name: LOADMUSICSTREAMFROMMEMORY
    raylib_name: LoadMusicStreamFromMemory
    args: [string, string, int]
    ret: music
    category: audio
    description: "Load music stream from memory (fileType, data, dataSize)"
    working: true
    custom_body: "LoadMusicStreamFromMemory(args[0].as_string().c_str(), (const unsigned char*)args[1].as_string().c_str(), args[2].as_int())"

  - name: UNLOADMUSICSTREAM
    raylib_name: UnloadMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Unload music stream from memory (pass music ID)"
    working: true
    custom_body: "UnloadMusicStream(*(Music*)args[0].as_int())"

  - name: PLAYMUSICSTREAM
    raylib_name: PlayMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Start music playing (pass music ID)"
    working: true
    custom_body: "PlayMusicStream(*(Music*)args[0].as_int())"

  - name: ISMUSICSTREAMPLAYING
    raylib_name: IsMusicStreamPlaying
    args: [int]
    ret: bool
    category: audio
    description: "Check if music is playing (pass music ID)"
    working: true
    custom_body: "IsMusicStreamPlaying(*(Music*)args[0].as_int())"

  - name: UPDATEMUSICSTREAM
    raylib_name: UpdateMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Update music buffers with new data (pass music ID)"
    working: true
    custom_body: "UpdateMusicStream(*(Music*)args[0].as_int())"

  - name: STOPMUSICSTREAM
    raylib_name: StopMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Stop music playing (pass music ID)"
    working: true
    custom_body: "StopMusicStream(*(Music*)args[0].as_int())"

  - name: PAUSEMUSICSTREAM
    raylib_name: PauseMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Pause music playing (pass music ID)"
    working: true
    custom_body: "PauseMusicStream(*(Music*)args[0].as_int())"

  - name: RESUMEMUSICSTREAM
    raylib_name: ResumeMusicStream
    args: [int]
    ret: void
    category: audio
    description: "Resume a paused music (pass music ID)"
    working: true
    custom_body: "ResumeMusicStream(*(Music*)args[0].as_int())"

  - name: SETMUSICVOLUME
    raylib_name: SetMusicVolume
    args: [int, float]
    ret: void
    category: audio
    description: "Set volume for music (0.0f to 1.0f, pass music ID)"
    working: true
    custom_body: "SetMusicVolume(*(Music*)args[0].as_int(), args[1].as_number())"

  - name: SETMUSICPITCH
    raylib_name: SetMusicPitch
    args: [int, float]
    ret: void
    category: audio
    description: "Set pitch for music (1.0f = normal speed, pass music ID)"
    working: true
    custom_body: "SetMusicPitch(*(Music*)args[0].as_int(), args[1].as_number())"

  - name: GETMUSICTIMELENGTH
    raylib_name: GetMusicTimeLength
    args: [int]
    ret: float
    category: audio
    description: "Get music time length (in seconds, pass music ID)"
    working: true
    custom_body: "GetMusicTimeLength(*(Music*)args[0].as_int())"

  - name: GETMUSICTIMEPLAYED
    raylib_name: GetMusicTimePlayed
    args: [int]
    ret: float
    category: audio
    description: "Get current music time played (in seconds, pass music ID)"
    working: true
    custom_body: "GetMusicTimePlayed(*(Music*)args[0].as_int())"

  # === WAVE FUNCTIONS ===
  - name: LOADWAVE
    raylib_name: LoadWave
    args: [string]
    ret: wave
    category: audio
    description: "Load wave data from file"
    working: true
    custom_body: "LoadWave(args[0].as_string().c_str())"

  - name: LOADWAVEFROMMEMORY
    raylib_name: LoadWaveFromMemory
    args: [string, string, int]
    ret: wave
    category: audio
    description: "Load wave from memory buffer (fileType, data, dataSize)"
    working: true
    custom_body: "LoadWaveFromMemory(args[0].as_string().c_str(), (const unsigned char*)args[1].as_string().c_str(), args[2].as_int())"

  - name: UNLOADWAVE
    raylib_name: UnloadWave
    args: [int]
    ret: void
    category: audio
    description: "Unload wave data (pass wave ID)"
    working: true
    custom_body: "UnloadWave(*(Wave*)args[0].as_int())"

  - name: EXPORTWAVE
    raylib_name: ExportWave
    args: [int, string]
    ret: bool
    category: audio
    description: "Export wave data to file (pass wave ID)"
    working: true
    custom_body: "ExportWave(*(Wave*)args[0].as_int(), args[1].as_string().c_str())"

  - name: EXPORTWAVEASCODE
    raylib_name: ExportWaveAsCode
    args: [int, string]
    ret: bool
    category: audio
    description: "Export wave as code file (pass wave ID)"
    working: true
    custom_body: "ExportWaveAsCode(*(Wave*)args[0].as_int(), args[1].as_string().c_str())"

  # === AUDIO STREAM FUNCTIONS ===
  - name: LOADAUDIOSTREAM
    raylib_name: LoadAudioStream
    args: [int, int, int]
    ret: audiostream
    category: audio
    description: "Load audio stream"
    working: true
    custom_body: "LoadAudioStream(args[0].as_int(), args[1].as_int(), args[2].as_int())"

  - name: UNLOADAUDIOSTREAM
    raylib_name: UnloadAudioStream
    args: [int]
    ret: void
    category: audio
    description: "Unload audio stream (pass audio stream ID)"
    working: true
    custom_body: "UnloadAudioStream(*(AudioStream*)args[0].as_int())"

  - name: UPDATEAUDIOSTREAM
    raylib_name: UpdateAudioStream
    args: [int, string, int]
    ret: void
    category: audio
    description: "Update audio stream buffers (pass audio stream ID)"
    working: true
    custom_body: "UpdateAudioStream(*(AudioStream*)args[0].as_int(), args[1].as_string().c_str(), args[2].as_int())"

  - name: ISAUDIOSTREAMPROCESSED
    raylib_name: IsAudioStreamProcessed
    args: [int]
    ret: bool
    category: audio
    description: "Check if audio stream has been processed (pass audio stream ID)"
    working: true
    custom_body: "IsAudioStreamProcessed(*(AudioStream*)args[0].as_int())"

  - name: PLAYAUDIOSTREAM
    raylib_name: PlayAudioStream
    args: [int]
    ret: void
    category: audio
    description: "Play audio stream (pass audio stream ID)"
    working: true
    custom_body: "PlayAudioStream(*(AudioStream*)args[0].as_int())"

  - name: PAUSEAUDIOSTREAM
    raylib_name: PauseAudioStream
    args: [int]
    ret: void
    category: audio
    description: "Pause audio stream (pass audio stream ID)"
    working: true
    custom_body: "PauseAudioStream(*(AudioStream*)args[0].as_int())"

  - name: RESUMEAUDIOSTREAM
    raylib_name: ResumeAudioStream
    args: [int]
    ret: void
    category: audio
    description: "Resume audio stream (pass audio stream ID)"
    working: true
    custom_body: "ResumeAudioStream(*(AudioStream*)args[0].as_int())"

  - name: STOPAUDIOSTREAM
    raylib_name: StopAudioStream
    args: [int]
    ret: void
    category: audio
    description: "Stop audio stream (pass audio stream ID)"
    working: true
    custom_body: "StopAudioStream(*(AudioStream*)args[0].as_int())"

  - name: SETAUDIOSTREAMVOLUME
    raylib_name: SetAudioStreamVolume
    args: [int, float]
    ret: void
    category: audio
    description: "Set volume for audio stream (0.0f to 1.0f, pass audio stream ID)"
    working: true
    custom_body: "SetAudioStreamVolume(*(AudioStream*)args[0].as_int(), args[1].as_number())"

  - name: SETAUDIOSTREAMPITCH
    raylib_name: SetAudioStreamPitch
    args: [int, float]
    ret: void
    category: audio
    description: "Set pitch for audio stream (1.0f = normal speed, pass audio stream ID)"
    working: true
    custom_body: "SetAudioStreamPitch(*(AudioStream*)args[0].as_int(), args[1].as_number())"
