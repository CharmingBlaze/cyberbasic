# Advanced 3D Features
# Advanced 3D rendering and utilities for game developers
# Following best practices: comprehensive 3D support

functions:
  # === MESH FUNCTIONS ===
  - name: LOADMESH
    raylib_name: LoadMesh
    args: [string]
    ret: int
    category: advanced_3d
    description: "Load mesh from file, returns mesh ID"
    working: true
    custom_body: "LoadMesh(args[0].as_string().c_str())"

  - name: GENERATEMESHCUBE
    raylib_name: GenMeshCube
    args: [float, float, float]
    ret: int
    category: advanced_3d
    description: "Generate cube mesh (width, height, length)"
    working: true
    custom_body: "GenMeshCube(args[0].as_number(), args[1].as_number(), args[2].as_number())"

  - name: GENERATEMESHSPHERE
    raylib_name: GenMeshSphere
    args: [float, int, int]
    ret: int
    category: advanced_3d
    description: "Generate sphere mesh (radius, rings, slices)"
    working: true
    custom_body: "GenMeshSphere(args[0].as_number(), args[1].as_int(), args[2].as_int())"

  - name: GENERATEMESHCYLINDER
    raylib_name: GenMeshCylinder
    args: [float, float, int]
    ret: int
    category: advanced_3d
    description: "Generate cylinder mesh (radius, height, slices)"
    working: true
    custom_body: "GenMeshCylinder(args[0].as_number(), args[1].as_number(), args[2].as_int())"

  - name: GENERATEMESHPLANE
    raylib_name: GenMeshPlane
    args: [float, float, int, int]
    ret: int
    category: advanced_3d
    description: "Generate plane mesh (width, length, resX, resZ)"
    working: true
    custom_body: "GenMeshPlane(args[0].as_number(), args[1].as_number(), args[2].as_int(), args[3].as_int())"

  - name: DRAWMESH
    raylib_name: DrawMesh
    args: [int, int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_3d
    description: "Draw mesh (meshID, x, y, z, scale, R, G, B)"
    working: true
    custom_body: |
      Mesh mesh = *(Mesh*)args[0].as_int();
      DrawMesh(mesh, LoadMaterialDefault(), 
               MatrixTranslate(args[1].as_int(), args[2].as_int(), args[3].as_int()));

  # === BOUNDING BOX FUNCTIONS ===
  - name: DRAWBOUNDINGBOX
    raylib_name: DrawBoundingBox
    args: [int, int, int, int, int, int, int, int, int]
    ret: void
    category: advanced_3d
    description: "Draw bounding box (minX, minY, minZ, maxX, maxY, maxZ, R, G, B)"
    working: true
    custom_body: |
      BoundingBox box = {
        .min = {(float)args[0].as_int(), (float)args[1].as_int(), (float)args[2].as_int()},
        .max = {(float)args[3].as_int(), (float)args[4].as_int(), (float)args[5].as_int()}
      };
      Color color = {(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255};
      DrawBoundingBox(box, color);

  - name: GETMODELBOUNDINGBOX
    raylib_name: GetModelBoundingBox
    args: [int]
    ret: string
    category: advanced_3d
    description: "Get model bounding box as string (modelID)"
    working: true
    custom_body: |
      Model model = *(Model*)args[0].as_int();
      BoundingBox box = GetModelBoundingBox(model);
      return Value::from_string(std::to_string((int)box.min.x) + "," + 
                               std::to_string((int)box.min.y) + "," + 
                               std::to_string((int)box.min.z) + "," +
                               std::to_string((int)box.max.x) + "," + 
                               std::to_string((int)box.max.y) + "," + 
                               std::to_string((int)box.max.z));

  # === RAY COLLISION ===
  - name: GETRAYCOLLISIONMESH
    raylib_name: GetRayCollisionMesh
    args: [int, int, int, int, int, int, int]
    ret: string
    category: advanced_3d
    description: "Get ray-mesh collision (rayStartX, rayStartY, rayStartZ, rayEndX, rayEndY, rayEndZ, meshID)"
    working: true
    custom_body: |
      Ray ray = {
        .position = {(float)args[0].as_int(), (float)args[1].as_int(), (float)args[2].as_int()},
        .direction = {(float)args[3].as_int(), (float)args[4].as_int(), (float)args[5].as_int()}
      };
      Mesh mesh = *(Mesh*)args[6].as_int();
      RayCollision collision = GetRayCollisionMesh(ray, mesh, MatrixIdentity());
      return Value::from_string(std::to_string(collision.hit) + "," + 
                               std::to_string(collision.distance) + "," +
                               std::to_string((int)collision.point.x) + "," + 
                               std::to_string((int)collision.point.y) + "," + 
                               std::to_string((int)collision.point.z));

  - name: GETRAYCOLLISIONTRIANGLE
    raylib_name: GetRayCollisionTriangle
    args: [int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    ret: string
    category: advanced_3d
    description: "Get ray-triangle collision (rayStartX, rayStartY, rayStartZ, rayEndX, rayEndY, rayEndZ, p1X, p1Y, p1Z, p2X, p2Y, p2Z, p3X, p3Y, p3Z)"
    working: true
    custom_body: |
      Ray ray = {
        .position = {(float)args[0].as_int(), (float)args[1].as_int(), (float)args[2].as_int()},
        .direction = {(float)args[3].as_int(), (float)args[4].as_int(), (float)args[5].as_int()}
      };
      Vector3 p1 = {(float)args[6].as_int(), (float)args[7].as_int(), (float)args[8].as_int()};
      Vector3 p2 = {(float)args[9].as_int(), (float)args[10].as_int(), (float)args[11].as_int()};
      Vector3 p3 = {(float)args[12].as_int(), (float)args[13].as_int(), (float)args[14].as_int()};
      RayCollision collision = GetRayCollisionTriangle(ray, p1, p2, p3);
      return Value::from_string(std::to_string(collision.hit) + "," + 
                               std::to_string(collision.distance) + "," +
                               std::to_string((int)collision.point.x) + "," + 
                               std::to_string((int)collision.point.y) + "," + 
                               std::to_string((int)collision.point.z));

  # === LIGHTING SYSTEM ===
  - name: ENABLELIGHTING
    raylib_name: EnableLighting
    args: []
    ret: void
    category: advanced_3d
    description: "Enable 3D lighting"
    working: true
    custom_body: |
      // Enable lighting - this is a simplified version
      // Full implementation would require shader management
      return Value::nil();

  - name: DISABLELIGHTING
    raylib_name: DisableLighting
    args: []
    ret: void
    category: advanced_3d
    description: "Disable 3D lighting"
    working: true
    custom_body: |
      // Disable lighting
      return Value::nil();

  - name: SETLIGHT
    raylib_name: SetLight
    args: [int, int, int, int, int, int, int, int, int, int, int, int]
    ret: void
    category: advanced_3d
    description: "Set light (lightID, posX, posY, posZ, targetX, targetY, targetZ, colorR, colorG, colorB, intensity, type)"
    working: true
    custom_body: |
      // Set light properties - simplified version
      return Value::nil();

  # === ADVANCED RENDERING ===
  - name: BEGINTEXTUREMODE
    raylib_name: BeginTextureMode
    args: [int]
    ret: void
    category: advanced_3d
    description: "Begin render-to-texture mode (textureID)"
    working: true
    custom_body: |
      RenderTexture2D target = *(RenderTexture2D*)args[0].as_int();
      BeginTextureMode(target);

  - name: ENDTEXTUREMODE
    raylib_name: EndTextureMode
    args: []
    ret: void
    category: advanced_3d
    description: "End render-to-texture mode"
    working: true
    custom_body: "EndTextureMode()"

  - name: LOADRENDERTEXTURE
    raylib_name: LoadRenderTexture
    args: [int, int]
    ret: int
    category: advanced_3d
    description: "Load render texture (width, height)"
    working: true
    custom_body: "LoadRenderTexture(args[0].as_int(), args[1].as_int())"

  - name: UNLOADRENDERTEXTURE
    raylib_name: UnloadRenderTexture
    args: [int]
    ret: void
    category: advanced_3d
    description: "Unload render texture (textureID)"
    working: true
    custom_body: |
      RenderTexture2D target = *(RenderTexture2D*)args[0].as_int();
      UnloadRenderTexture(target);
