# Input Handling Functions
# Mouse, keyboard, and gamepad input functions
# Following best practices: proper input handling

functions:
  # === MOUSE INPUT ===
  - name: GETMOUSEX
    raylib_name: GetMouseX
    args: []
    ret: int
    category: input
    description: "Get mouse X position"
    working: true

  - name: GETMOUSEY
    raylib_name: GetMouseY
    args: []
    ret: int
    category: input
    description: "Get mouse Y position"
    working: true

  - name: GETMOUSEPOSITION
    raylib_name: GetMousePosition
    args: []
    ret: vector2
    category: input
    description: "Get mouse position as Vector2"
    working: true
    custom_body: "GetMousePosition()"

  - name: GETMOUSEDELTA
    raylib_name: GetMouseDelta
    args: []
    ret: vector2
    category: input
    description: "Get mouse delta movement as Vector2"
    working: true
    custom_body: "GetMouseDelta()"

  - name: SETMOUSEPOSITION
    raylib_name: SetMousePosition
    args: [int, int]
    ret: void
    category: input
    description: "Set mouse position to x,y"
    working: true

  - name: SETMOUSEOFFSET
    raylib_name: SetMouseOffset
    args: [int, int]
    ret: void
    category: input
    description: "Set mouse offset"
    working: true

  - name: SETMOUSESCALE
    raylib_name: SetMouseScale
    args: [float, float]
    ret: void
    category: input
    description: "Set mouse scale"
    working: true

  - name: GETMOUSEWHEELMOVE
    raylib_name: GetMouseWheelMove
    args: []
    ret: float
    category: input
    description: "Get mouse wheel movement"
    working: true

  - name: SETMOUSECURSOR
    raylib_name: SetMouseCursor
    args: [int]
    ret: void
    category: input
    description: "Set mouse cursor type"
    working: true

  - name: ISMOUSEBUTTONPRESSED
    raylib_name: IsMouseButtonPressed
    args: [int]
    ret: bool
    category: input
    description: "Check if mouse button is pressed"
    working: true

  - name: ISMOUSEBUTTONDOWN
    raylib_name: IsMouseButtonDown
    args: [int]
    ret: bool
    category: input
    description: "Check if mouse button is down"
    working: true

  - name: ISMOUSEBUTTONRELEASED
    raylib_name: IsMouseButtonReleased
    args: [int]
    ret: bool
    category: input
    description: "Check if mouse button is released"
    working: true

  - name: ISMOUSEBUTTONUP
    raylib_name: IsMouseButtonUp
    args: [int]
    ret: bool
    category: input
    description: "Check if mouse button is up"
    working: true

  # === KEYBOARD INPUT ===
  - name: ISKEYPRESSED
    raylib_name: IsKeyPressed
    args: [int]
    ret: bool
    category: input
    description: "Check if key is pressed"
    working: true

  - name: ISKEYDOWN
    raylib_name: IsKeyDown
    args: [int]
    ret: bool
    category: input
    description: "Check if key is down"
    working: true

  - name: ISKEYRELEASED
    raylib_name: IsKeyReleased
    args: [int]
    ret: bool
    category: input
    description: "Check if key is released"
    working: true

  - name: ISKEYUP
    raylib_name: IsKeyUp
    args: [int]
    ret: bool
    category: input
    description: "Check if key is up"
    working: true

  - name: SETEXITKEY
    raylib_name: SetExitKey
    args: [int]
    ret: void
    category: input
    description: "Set exit key"
    working: true

  - name: GETKEYPRESSED
    raylib_name: GetKeyPressed
    args: []
    ret: int
    category: input
    description: "Get pressed key code"
    working: true

  - name: GETCHARPressed
    raylib_name: GetCharPressed
    args: []
    ret: int
    category: input
    description: "Get pressed character"
    working: true

  # === GAMEPAD INPUT ===
  - name: ISGAMEPADAVAILABLE
    raylib_name: IsGamepadAvailable
    args: [int]
    ret: bool
    category: input
    description: "Check if gamepad is available"
    working: true

  - name: GETGAMEPADNAME
    raylib_name: GetGamepadName
    args: [int]
    ret: string
    category: input
    description: "Get gamepad name"
    working: true
    custom_body: "GetGamepadName(args[0].as_int())"

  - name: ISGAMEPADBUTTONPRESSED
    raylib_name: IsGamepadButtonPressed
    args: [int, int]
    ret: bool
    category: input
    description: "Check if gamepad button is pressed"
    working: true

  - name: ISGAMEPADBUTTONDOWN
    raylib_name: IsGamepadButtonDown
    args: [int, int]
    ret: bool
    category: input
    description: "Check if gamepad button is down"
    working: true

  - name: ISGAMEPADBUTTONRELEASED
    raylib_name: IsGamepadButtonReleased
    args: [int, int]
    ret: bool
    category: input
    description: "Check if gamepad button is released"
    working: true

  - name: ISGAMEPADBUTTONUP
    raylib_name: IsGamepadButtonUp
    args: [int, int]
    ret: bool
    category: input
    description: "Check if gamepad button is up"
    working: true

  - name: GETGAMEPADAXISMOVEMENT
    raylib_name: GetGamepadAxisMovement
    args: [int, int]
    ret: float
    category: input
    description: "Get gamepad axis movement"
    working: true

  - name: SETGAMEPADMAPPINGS
    raylib_name: SetGamepadMappings
    args: [string]
    ret: int
    category: input
    description: "Set gamepad mappings from string"
    working: true

  # === TOUCH INPUT ===
  - name: GETTOUCHX
    raylib_name: GetTouchX
    args: []
    ret: int
    category: input
    description: "Get touch X position"
    working: true

  - name: GETTOUCHY
    raylib_name: GetTouchY
    args: []
    ret: int
    category: input
    description: "Get touch Y position"
    working: true

  - name: GETTOUCHPOSITION
    raylib_name: GetTouchPosition
    args: [int]
    ret: vector2
    category: input
    description: "Get touch position as Vector2"
    working: true
    custom_body: "GetTouchPosition(args[0].as_int())"

  - name: GETTOUCHPOINTID
    raylib_name: GetTouchPointId
    args: [int]
    ret: int
    category: input
    description: "Get touch point ID"
    working: true

  - name: GETTOUCHPOINTCOUNT
    raylib_name: GetTouchPointCount
    args: []
    ret: int
    category: input
    description: "Get touch point count"
    working: true
