# Advanced Graphics System Functions
# Triangles, polygons, advanced shapes, and geometric operations
# Following best practices: proper advanced graphics handling

functions:
  # === TRIANGLE FUNCTIONS ===
  - name: DRAWTRIANGLE
    raylib_name: DrawTriangle
    args: [int, int, int, int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw triangle with RGB color (x1, y1, x2, y2, x3, y3, R, G, B)"
    working: true
    custom_body: "DrawTriangle(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  - name: DRAWTRIANGLELINES
    raylib_name: DrawTriangleLines
    args: [int, int, int, int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw triangle outline with RGB color (x1, y1, x2, y2, x3, y3, R, G, B)"
    working: true
    custom_body: "DrawTriangleLines(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  - name: DRAWTRIANGLEFAN
    raylib_name: DrawTriangleFan
    args: [int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw triangle fan with RGB color (points, pointCount, R, G, B)"
    working: true
    custom_body: "DrawTriangleFan((Vector2*)args[0].as_int(), args[1].as_int(), Color{(unsigned char)args[2].as_int(), (unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), 255})"

  - name: DRAWTRIANGLESTRIP
    raylib_name: DrawTriangleStrip
    args: [int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw triangle strip with RGB color (points, pointCount, R, G, B)"
    working: true
    custom_body: "DrawTriangleStrip((Vector2*)args[0].as_int(), args[1].as_int(), Color{(unsigned char)args[2].as_int(), (unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), 255})"

  # === POLYGON FUNCTIONS ===
  - name: DRAWPOLYGON
    raylib_name: DrawPoly
    args: [int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw polygon with RGB color (centerX, centerY, sides, radius, rotation, R, G, B)"
    working: true
    custom_body: "DrawPoly(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_int(), args[3].as_number(), args[4].as_number(), Color{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255})"

  - name: DRAWPOLYGONLINES
    raylib_name: DrawPolyLines
    args: [int, int, int, float, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw polygon outline with RGB color (centerX, centerY, sides, radius, rotation, R, G, B)"
    working: true
    custom_body: "DrawPolyLines(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_int(), args[3].as_number(), args[4].as_number(), Color{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255})"

  - name: DRAWPOLYGONLINESEX
    raylib_name: DrawPolyLinesEx
    args: [int, int, int, float, float, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw polygon outline with thickness and RGB color (centerX, centerY, sides, radius, rotation, thickness, R, G, B)"
    working: true
    custom_body: "DrawPolyLinesEx(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_int(), args[3].as_number(), args[4].as_number(), args[5].as_number(), Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  # === ADVANCED SHAPES ===
  - name: DRAWCIRCLE
    raylib_name: DrawCircle
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle with RGB color (centerX, centerY, radius, R, G, B)"
    working: true
    custom_body: "DrawCircle(args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWCIRCLELINES
    raylib_name: DrawCircleLines
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle outline with RGB color (centerX, centerY, radius, R, G, B)"
    working: true
    custom_body: "DrawCircleLines(args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWCIRCLESECTOR
    raylib_name: DrawCircleSector
    args: [int, int, float, float, float, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle sector with RGB color (centerX, centerY, radius, startAngle, endAngle, segments, R, G, B)"
    working: true
    custom_body: "DrawCircleSector(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), args[3].as_number(), args[4].as_number(), args[5].as_int(), Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  - name: DRAWCIRCLESECTORLINES
    raylib_name: DrawCircleSectorLines
    args: [int, int, float, float, float, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle sector outline with RGB color (centerX, centerY, radius, startAngle, endAngle, segments, R, G, B)"
    working: true
    custom_body: "DrawCircleSectorLines(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), args[3].as_number(), args[4].as_number(), args[5].as_int(), Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  - name: DRAWCIRCLEGRADIENT
    raylib_name: DrawCircleGradient
    args: [int, int, float, int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle with gradient colors (centerX, centerY, radius, color1R, color1G, color1B, color2R, color2G, color2B)"
    working: true
    custom_body: "DrawCircleGradient(args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255}, Color{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255})"

  # === ELLIPSE FUNCTIONS ===
  - name: DRAWELLIPSE
    raylib_name: DrawEllipse
    args: [int, int, float, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw ellipse with RGB color (centerX, centerY, radiusH, radiusV, R, G, B)"
    working: true
    custom_body: "DrawEllipse(args[0].as_int(), args[1].as_int(), args[2].as_number(), args[3].as_number(), Color{(unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), 255})"

  - name: DRAWELLIPSELINES
    raylib_name: DrawEllipseLines
    args: [int, int, float, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw ellipse outline with RGB color (centerX, centerY, radiusH, radiusV, R, G, B)"
    working: true
    custom_body: "DrawEllipseLines(args[0].as_int(), args[1].as_int(), args[2].as_number(), args[3].as_number(), Color{(unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), 255})"

  # === RING FUNCTIONS ===
  - name: DRAWRING
    raylib_name: DrawRing
    args: [int, int, float, float, float, float, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw ring with RGB color (centerX, centerY, innerRadius, outerRadius, startAngle, endAngle, segments, R, G, B)"
    working: true
    custom_body: "DrawRing(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), args[3].as_number(), args[4].as_number(), args[5].as_number(), args[6].as_int(), Color{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255})"

  - name: DRAWRINGLINES
    raylib_name: DrawRingLines
    args: [int, int, float, float, float, float, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw ring outline with RGB color (centerX, centerY, innerRadius, outerRadius, startAngle, endAngle, segments, R, G, B)"
    working: true
    custom_body: "DrawRingLines(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), args[3].as_number(), args[4].as_number(), args[5].as_number(), args[6].as_int(), Color{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255})"

  # === LINE FUNCTIONS ===
  - name: DRAWLINE
    raylib_name: DrawLine
    args: [int, int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw line with RGB color (startX, startY, endX, endY, R, G, B)"
    working: true
    custom_body: "DrawLine(args[0].as_int(), args[1].as_int(), args[2].as_int(), args[3].as_int(), Color{(unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), 255})"

  - name: DRAWLINEV
    raylib_name: DrawLineV
    args: [int, int, int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw line using Vector2 with RGB color (startX, startY, endX, endY, R, G, B)"
    working: true
    custom_body: "DrawLineV(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Color{(unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), 255})"

  - name: DRAWLINEBEZIER
    raylib_name: DrawLineBezier
    args: [int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw line using cubic-bezier curves with RGB color (startX, startY, endX, endY, thickness, R, G, B)"
    working: true
    custom_body: "DrawLineBezier(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, args[4].as_number(), Color{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255})"



  # === POINT FUNCTIONS ===
  - name: DRAWPIXEL
    raylib_name: DrawPixel
    args: [int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw pixel with RGB color (x, y, R, G, B)"
    working: true
    custom_body: "DrawPixel(args[0].as_int(), args[1].as_int(), Color{(unsigned char)args[2].as_int(), (unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), 255})"

  - name: DRAWPIXELV
    raylib_name: DrawPixelV
    args: [int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw pixel using Vector2 with RGB color (x, y, R, G, B)"
    working: true
    custom_body: "DrawPixelV(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Color{(unsigned char)args[2].as_int(), (unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), 255})"

  # === GEOMETRIC OPERATIONS ===
  - name: CHECKCOLLISIONCIRCLES
    raylib_name: CheckCollisionCircles
    args: [int, int, float, int, int, float]
    ret: bool
    category: advanced_graphics
    description: "Check collision between two circles (center1X, center1Y, radius1, center2X, center2Y, radius2)"
    working: true
    custom_body: "CheckCollisionCircles(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), Vector2{(float)args[3].as_int(), (float)args[4].as_int()}, args[5].as_number())"

  - name: CHECKCOLLISIONCIRCLERECT
    raylib_name: CheckCollisionCircleRec
    args: [int, int, float, int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check collision between circle and rectangle (centerX, centerY, radius, rectX, rectY, rectWidth, rectHeight)"
    working: true
    custom_body: "CheckCollisionCircleRec(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), Rectangle{(float)args[3].as_int(), (float)args[4].as_int(), (float)args[5].as_int(), (float)args[6].as_int()})"

  - name: CHECKCOLLISIONRECTS
    raylib_name: CheckCollisionRecs
    args: [int, int, int, int, int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check collision between two rectangles (rect1X, rect1Y, rect1Width, rect1Height, rect2X, rect2Y, rect2Width, rect2Height)"
    working: true
    custom_body: "CheckCollisionRecs(Rectangle{(float)args[0].as_int(), (float)args[1].as_int(), (float)args[2].as_int(), (float)args[3].as_int()}, Rectangle{(float)args[4].as_int(), (float)args[5].as_int(), (float)args[6].as_int(), (float)args[7].as_int()})"

  - name: CHECKCOLLISIONPOINTRECT
    raylib_name: CheckCollisionPointRec
    args: [int, int, int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check collision between point and rectangle (pointX, pointY, rectX, rectY, rectWidth, rectHeight)"
    working: true
    custom_body: "CheckCollisionPointRec(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Rectangle{(float)args[2].as_int(), (float)args[3].as_int(), (float)args[4].as_int(), (float)args[5].as_int()})"

  - name: CHECKCOLLISIONPOINTCIRCLE
    raylib_name: CheckCollisionPointCircle
    args: [int, int, int, int, float]
    ret: bool
    category: advanced_graphics
    description: "Check collision between point and circle (pointX, pointY, centerX, centerY, radius)"
    working: true
    custom_body: "CheckCollisionPointCircle(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, args[4].as_number())"

  - name: CHECKCOLLISIONPOINTTRIANGLE
    raylib_name: CheckCollisionPointTriangle
    args: [int, int, int, int, int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check collision between point and triangle (pointX, pointY, x1, y1, x2, y2, x3, y3)"
    working: true
    custom_body: "CheckCollisionPointTriangle(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Vector2{(float)args[6].as_int(), (float)args[7].as_int()})"

  # === ADDITIONAL LINE FUNCTIONS ===
  - name: DRAWLINEEX
    raylib_name: DrawLineEx
    args: [int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw line with thickness and RGB color (startX, startY, endX, endY, thickness, R, G, B)"
    working: true
    custom_body: "DrawLineEx(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, args[4].as_number(), Color{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255})"

  - name: DRAWLINESTRIP
    raylib_name: DrawLineStrip
    args: [int, int, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw line strip from points array with RGB color (points, pointCount, R, G, B)"
    working: true
    custom_body: "DrawLineStrip((Vector2*)args[0].as_int(), args[1].as_int(), Color{(unsigned char)args[2].as_int(), (unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), 255})"

  # === CIRCLE VECTOR VARIANTS ===
  - name: DRAWCIRCLEV
    raylib_name: DrawCircleV
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle using Vector2 center with RGB color (centerX, centerY, radius, R, G, B)"
    working: true
    custom_body: "DrawCircleV(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWCIRCLELINESV
    raylib_name: DrawCircleLinesV
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw circle outline using Vector2 center with RGB color (centerX, centerY, radius, R, G, B)"
    working: true
    custom_body: "DrawCircleLinesV(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  # === SPLINE DRAWING FUNCTIONS ===
  - name: DRAWSPLINELINEAR
    raylib_name: DrawSplineLinear
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw linear spline from points array with thickness and RGB color (points, pointCount, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineLinear((Vector2*)args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWSPLINEBASIS
    raylib_name: DrawSplineBasis
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw B-Spline from points array with thickness and RGB color (points, pointCount, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineBasis((Vector2*)args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWSPLINECATMULLROM
    raylib_name: DrawSplineCatmullRom
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Catmull-Rom spline from points array with thickness and RGB color (points, pointCount, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineCatmullRom((Vector2*)args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWSPLINEBEZIERQUADRATIC
    raylib_name: DrawSplineBezierQuadratic
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Quadratic Bezier spline from points array with thickness and RGB color (points, pointCount, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineBezierQuadratic((Vector2*)args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWSPLINEBEZIERCUBIC
    raylib_name: DrawSplineBezierCubic
    args: [int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Cubic Bezier spline from points array with thickness and RGB color (points, pointCount, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineBezierCubic((Vector2*)args[0].as_int(), args[1].as_int(), args[2].as_number(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  # === SPLINE SEGMENT DRAWING FUNCTIONS ===
  - name: DRAWSPLINESEGMENTLINEAR
    raylib_name: DrawSplineSegmentLinear
    args: [int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw linear spline segment with thickness and RGB color (p1x, p1y, p2x, p2y, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineSegmentLinear(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, args[4].as_number(), Color{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255})"

  - name: DRAWSPLINESEGMENTBASIS
    raylib_name: DrawSplineSegmentBasis
    args: [int, int, int, int, int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw B-Spline segment with thickness and RGB color (p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineSegmentBasis(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Vector2{(float)args[6].as_int(), (float)args[7].as_int()}, args[8].as_number(), Color{(unsigned char)args[9].as_int(), (unsigned char)args[10].as_int(), (unsigned char)args[11].as_int(), 255})"

  - name: DRAWSPLINESEGMENTCATMULLROM
    raylib_name: DrawSplineSegmentCatmullRom
    args: [int, int, int, int, int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Catmull-Rom spline segment with thickness and RGB color (p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineSegmentCatmullRom(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Vector2{(float)args[6].as_int(), (float)args[7].as_int()}, args[8].as_number(), Color{(unsigned char)args[9].as_int(), (unsigned char)args[10].as_int(), (unsigned char)args[11].as_int(), 255})"

  - name: DRAWSPLINESEGMENTBEZIERQUADRATIC
    raylib_name: DrawSplineSegmentBezierQuadratic
    args: [int, int, int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Quadratic Bezier spline segment with thickness and RGB color (p1x,p1y,cx,cy,p3x,p3y, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineSegmentBezierQuadratic(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, args[6].as_number(), Color{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255})"

  - name: DRAWSPLINESEGMENTBEZIERCUBIC
    raylib_name: DrawSplineSegmentBezierCubic
    args: [int, int, int, int, int, int, int, int, float, int, int, int]
    ret: void
    category: advanced_graphics
    description: "Draw Cubic Bezier spline segment with thickness and RGB color (p1x,p1y,c1x,c1y,c2x,c2y,p4x,p4y, thickness, R, G, B)"
    working: true
    custom_body: "DrawSplineSegmentBezierCubic(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, Vector2{(float)args[6].as_int(), (float)args[7].as_int()}, args[8].as_number(), Color{(unsigned char)args[9].as_int(), (unsigned char)args[10].as_int(), (unsigned char)args[11].as_int(), 255})"

  # === ADDITIONAL GEOMETRIC OPERATIONS ===
  - name: CHECKCOLLISIONPOINTPOLY
    raylib_name: CheckCollisionPointPoly
    args: [int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check if point is inside polygon described by points array (pointX, pointY, points, pointCount)"
    working: true
    custom_body: "CheckCollisionPointPoly(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, (Vector2*)args[2].as_int(), args[3].as_int())"

  - name: CHECKCOLLISIONPOINTLINE
    raylib_name: CheckCollisionPointLine
    args: [int, int, int, int, int, int, int]
    ret: bool
    category: advanced_graphics
    description: "Check if point is on line within threshold (pointX, pointY, p1x, p1y, p2x, p2y, threshold)"
    working: true
    custom_body: "CheckCollisionPointLine(Vector2{(float)args[0].as_int(), (float)args[1].as_int()}, Vector2{(float)args[2].as_int(), (float)args[3].as_int()}, Vector2{(float)args[4].as_int(), (float)args[5].as_int()}, args[6].as_int())"
