# Post-Processing System Functions
# Screen effects, filters, and render texture operations
# Following best practices: proper post-processing handling

functions:
  # === RENDER TEXTURE OPERATIONS ===
  - name: LOADRENDERTEXTURE
    raylib_name: LoadRenderTexture
    args: [int, int]
    ret: rendertexture2d
    category: post_processing
    description: "Load render texture (width, height)"
    working: true
    custom_body: "LoadRenderTexture(args[0].as_int(), args[1].as_int())"

  - name: UNLOADRENDERTEXTURE
    raylib_name: UnloadRenderTexture
    args: [int]
    ret: void
    category: post_processing
    description: "Unload render texture (pass render texture ID)"
    working: true
    custom_body: "UnloadRenderTexture(*(RenderTexture2D*)args[0].as_int())"

  - name: BEGINTEXTUREMODE
    raylib_name: BeginTextureMode
    args: [int]
    ret: void
    category: post_processing
    description: "Begin rendering to texture (pass render texture ID)"
    working: true
    custom_body: "BeginTextureMode(*(RenderTexture2D*)args[0].as_int())"

  - name: ENDTEXTUREMODE
    raylib_name: EndTextureMode
    args: []
    ret: void
    category: post_processing
    description: "End rendering to texture"
    working: true
    custom_body: "EndTextureMode()"

  # === SCREEN EFFECTS ===
  - name: DRAWTEXTURE
    raylib_name: DrawTexture
    args: [int, int, int, int, int, int, int]
    ret: void
    category: post_processing
    description: "Draw texture at x,y with RGB color (texture ID, x, y, R, G, B)"
    working: true
    custom_body: "DrawTexture(*(Texture2D*)args[0].as_int(), args[1].as_int(), args[2].as_int(), Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWTEXTUREV
    raylib_name: DrawTextureV
    args: [int, int, int, int, int, int]
    ret: void
    category: post_processing
    description: "Draw texture at Vector2 position with RGB color (texture ID, x, y, R, G, B)"
    working: true
    custom_body: "DrawTextureV(*(Texture2D*)args[0].as_int(), Vector2{(float)args[1].as_int(), (float)args[2].as_int()}, Color{(unsigned char)args[3].as_int(), (unsigned char)args[4].as_int(), (unsigned char)args[5].as_int(), 255})"

  - name: DRAWTEXTUREREC
    raylib_name: DrawTextureRec
    args: [int, int, int, int, int, int, int, int, int]
    ret: void
    category: post_processing
    description: "Draw texture rectangle at x,y with RGB color (texture ID, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, R, G, B)"
    working: true
    custom_body: "DrawTextureRec(*(Texture2D*)args[0].as_int(), Rectangle{(float)args[1].as_int(), (float)args[2].as_int(), (float)args[3].as_int(), (float)args[4].as_int()}, Vector2{(float)args[5].as_int(), (float)args[6].as_int()}, Color{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255})"





  # === SCREEN CAPTURE ===
  - name: TAKESCREENSHOT
    raylib_name: TakeScreenshot
    args: [string]
    ret: void
    category: post_processing
    description: "Take screenshot and save to file (filename)"
    working: true
    custom_body: "TakeScreenshot(args[0].as_string().c_str())"

  - name: SETCONFIGFLAGS
    raylib_name: SetConfigFlags
    args: [int]
    ret: void
    category: post_processing
    description: "Set configuration flags (flags)"
    working: true
    custom_body: "SetConfigFlags(args[0].as_int())"

  # === BLENDING MODES ===
  - name: BEGINBLENDMODE
    raylib_name: BeginBlendMode
    args: [int]
    ret: void
    category: post_processing
    description: "Begin blending mode (mode)"
    working: true
    custom_body: "BeginBlendMode(args[0].as_int())"

  - name: ENDBLENDMODE
    raylib_name: EndBlendMode
    args: []
    ret: void
    category: post_processing
    description: "End blending mode"
    working: true
    custom_body: "EndBlendMode()"

  # === SCISSOR MODE ===
  - name: BEGINSCISSORMODE
    raylib_name: BeginScissorMode
    args: [int, int, int, int]
    ret: void
    category: post_processing
    description: "Begin scissor mode (x, y, width, height)"
    working: true
    custom_body: "BeginScissorMode(args[0].as_int(), args[1].as_int(), args[2].as_int(), args[3].as_int())"

  - name: ENDSCISSORMODE
    raylib_name: EndScissorMode
    args: []
    ret: void
    category: post_processing
    description: "End scissor mode"
    working: true
    custom_body: "EndScissorMode()"






