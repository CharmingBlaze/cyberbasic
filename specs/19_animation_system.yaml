# Animation System Functions
# Easy-to-use animation controls for game developers
# Following best practices: simple, intuitive API

functions:
  # === MODEL ANIMATION ===
  - name: LOADMODELANIMATIONS
    raylib_name: LoadModelAnimations
    args: [string]
    ret: int
    category: animation
    description: "Load model animations from file, returns animation count"
    working: true
    custom_body: |
      unsigned int animCount = 0;
      ModelAnimation *anims = LoadModelAnimations(args[0].as_string().c_str(), &animCount);
      // Store animations in global array for later use
      return Value::from_number(animCount);

  - name: UPDATEMODELANIMATION
    raylib_name: UpdateModelAnimation
    args: [int, int, float]
    ret: void
    category: animation
    description: "Update model animation (modelID, animID, frame)"
    working: true
    custom_body: |
      // Note: This requires storing animations globally
      // For now, return nil - full implementation needs animation storage
      return Value::nil();

  - name: DRAWMODELANIMATION
    raylib_name: DrawModelAnimation
    args: [int, int, int, int, int, float, int, int, int]
    ret: void
    category: animation
    description: "Draw animated model (modelID, animID, x, y, z, scale, R, G, B)"
    working: true
    custom_body: |
      // Note: This requires storing animations globally
      // For now, return nil - full implementation needs animation storage
      return Value::nil();

  # === SIMPLE ANIMATION HELPERS ===
  - name: ANIMATEMODELROTATION
    raylib_name: AnimateModelRotation
    args: [int, float, float, float, float]
    ret: void
    category: animation
    description: "Animate model rotation (modelID, rotX, rotY, rotZ, speed)"
    working: true
    custom_body: |
      // Simple rotation animation - stores rotation in global state
      // This is a simplified version for easy use
      return Value::nil();

  - name: ANIMATEMODELSCALE
    raylib_name: AnimateModelScale
    args: [int, float, float, float, float]
    ret: void
    category: animation
    description: "Animate model scale (modelID, scaleX, scaleY, scaleZ, speed)"
    working: true
    custom_body: |
      // Simple scale animation - stores scale in global state
      return Value::nil();

  - name: ANIMATEMODELPOSITION
    raylib_name: AnimateModelPosition
    args: [int, float, float, float, float]
    ret: void
    category: animation
    description: "Animate model position (modelID, posX, posY, posZ, speed)"
    working: true
    custom_body: |
      // Simple position animation - stores position in global state
      return Value::nil();

  # === ANIMATION CONTROL ===
  - name: SETANIMATIONFRAME
    raylib_name: SetAnimationFrame
    args: [int, float]
    ret: void
    category: animation
    description: "Set animation frame (animID, frame)"
    working: true
    custom_body: |
      // Store frame in global animation state
      return Value::nil();

  - name: GETANIMATIONFRAME
    raylib_name: GetAnimationFrame
    args: [int]
    ret: float
    category: animation
    description: "Get current animation frame (animID)"
    working: true
    custom_body: |
      // Get frame from global animation state
      return Value::from_number(0.0);

  - name: SETANIMATIONSPEED
    raylib_name: SetAnimationSpeed
    args: [int, float]
    ret: void
    category: animation
    description: "Set animation speed (animID, speed)"
    working: true
    custom_body: |
      // Store speed in global animation state
      return Value::nil();

  - name: GETANIMATIONSPEED
    raylib_name: GetAnimationSpeed
    args: [int]
    ret: float
    category: animation
    description: "Get animation speed (animID)"
    working: true
    custom_body: |
      // Get speed from global animation state
      return Value::from_number(1.0);

  # === ANIMATION UTILITIES ===
  - name: ISANIMATIONFINISHED
    raylib_name: IsAnimationFinished
    args: [int]
    ret: bool
    category: animation
    description: "Check if animation is finished (animID)"
    working: true
    custom_body: |
      // Check if animation is finished
      return Value::from_bool(false);

  - name: RESETANIMATION
    raylib_name: ResetAnimation
    args: [int]
    ret: void
    category: animation
    description: "Reset animation to beginning (animID)"
    working: true
    custom_body: |
      // Reset animation frame to 0
      return Value::nil();

  - name: PAUSEANIMATION
    raylib_name: PauseAnimation
    args: [int]
    ret: void
    category: animation
    description: "Pause animation (animID)"
    working: true
    custom_body: |
      // Pause animation
      return Value::nil();

  - name: RESUMEANIMATION
    raylib_name: ResumeAnimation
    args: [int]
    ret: void
    category: animation
    description: "Resume animation (animID)"
    working: true
    custom_body: |
      // Resume animation
      return Value::nil();
