functions:
  # === ADVANCED 2D DRAWING ===
  - name: DRAWTEXTUREEX
    map_to: DrawTextureEx
    args: [int, int, int, double, double, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int x = args[1].as_int();
      int y = args[2].as_int();
      float rotation = (float)args[3].as_number();
      float scale = (float)args[4].as_number();
      ::Color tint{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Vector2 position{(float)x, (float)y};
        ::Vector2 origin{0, 0};
        ::DrawTextureEx(it->second, position, rotation, scale, tint);
      }
  
  - name: DRAWTEXTUREREC
    map_to: DrawTextureRec
    args: [int, int, int, int, int, int, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int src_x = args[1].as_int();
      int src_y = args[2].as_int();
      int src_w = args[3].as_int();
      int src_h = args[4].as_int();
      int dest_x = args[5].as_int();
      int dest_y = args[6].as_int();
      ::Color tint{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255, 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Rectangle source{(float)src_x, (float)src_y, (float)src_w, (float)src_h};
        ::Vector2 position{(float)dest_x, (float)dest_y};
        ::DrawTextureRec(it->second, source, position, tint);
      }
  
  - name: DRAWTEXTUREQUAD
    map_to: DrawTextureRec
    args: [int, int, int, int, int, int, int, int, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int src_x = args[1].as_int();
      int src_y = args[2].as_int();
      int src_w = args[3].as_int();
      int src_h = args[4].as_int();
      int dest_x = args[5].as_int();
      int dest_y = args[6].as_int();
      int dest_w = args[7].as_int();
      int dest_h = args[8].as_int();
      ::Color tint{(unsigned char)args[9].as_int(), (unsigned char)args[10].as_int(), 255, 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Rectangle source{(float)src_x, (float)src_y, (float)src_w, (float)src_h};
        ::Vector2 position{(float)dest_x, (float)dest_y};
        ::DrawTextureRec(it->second, source, position, tint);
      }
      return Value::nil();
  
  - name: DRAWTEXTURETILED
    map_to: DrawTextureRec
    args: [int, int, int, int, int, int, int, int, int, int, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int src_x = args[1].as_int();
      int src_y = args[2].as_int();
      int src_w = args[3].as_int();
      int src_h = args[4].as_int();
      int dest_x = args[5].as_int();
      int dest_y = args[6].as_int();
      int dest_w = args[7].as_int();
      int dest_h = args[8].as_int();
      ::Color tint{(unsigned char)args[9].as_int(), (unsigned char)args[10].as_int(), (unsigned char)args[11].as_int(), 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Rectangle source{(float)src_x, (float)src_y, (float)src_w, (float)src_h};
        ::Vector2 position{(float)dest_x, (float)dest_y};
        ::DrawTextureRec(it->second, source, position, tint);
      }
      return Value::nil();
  
  - name: DRAWPIXEL
    map_to: DrawPixel
    args: [int, int, Color]
    ret: void
  
  - name: DRAWPIXELV
    map_to: DrawPixelV
    args: [Vector2, Color]
    ret: void
  
  - name: DRAWLINE
    map_to: DrawLine
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWLINEV
    map_to: DrawLineV
    args: [Vector2, Vector2, Color]
    ret: void
  
  - name: DRAWLINES
    map_to: DrawLine
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWCIRCLE
    map_to: DrawCircle
    args: [int, int, int, Color]
    ret: void
  
  - name: DRAWCIRCLEV
    map_to: DrawCircleV
    args: [Vector2, int, Color]
    ret: void
  
  - name: DRAWCIRCLELINES
    map_to: DrawCircleLines
    args: [int, int, int, Color]
    ret: void
  
  - name: DRAWCIRCLELINESV
    map_to: DrawCircleLinesV
    args: [Vector2, int, Color]
    ret: void
  
  - name: DRAWRECTANGLE
    map_to: DrawRectangle
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWRECTANGLEV
    map_to: DrawRectangleV
    args: [Vector2, Vector2, Color]
    ret: void
  
  - name: DRAWRECTANGLELINES
    map_to: DrawRectangleLines
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWRECTANGLELINESEX
    map_to: DrawRectangleLinesEx
    args: [Rectangle, int, Color]
    ret: void
  
  - name: DRAWRECTANGLEROUNDED
    map_to: DrawRectangleRounded
    args: [Rectangle, double, Color]
    ret: void
  
  - name: DRAWRECTANGLEROUNDEDLINES
    map_to: DrawRectangleRoundedLines
    args: [Rectangle, double, int, Color]
    ret: void
  
  - name: DRAWELLIPSE
    map_to: DrawEllipse
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWELLIPSELINES
    map_to: DrawEllipseLines
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWTRIANGLE
    map_to: DrawTriangle
    args: [Vector2, Vector2, Vector2, Color]
    ret: void
  
  - name: DRAWTRIANGLELINES
    map_to: DrawTriangleLines
    args: [Vector2, Vector2, Vector2, Color]
    ret: void
  
  - name: DRAWPOLY
    map_to: DrawPoly
    args: [double, double, double, int, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255};
      ::DrawPoly(center, args[3].as_int(), (float)args[4].as_number(), 0.0f, c);
      return Value::nil();
  
  - name: DRAWPOLYLINES
    map_to: DrawPolyLines
    args: [double, double, double, int, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255};
      ::DrawPolyLines(center, args[3].as_int(), (float)args[4].as_number(), 0.0f, c);
      return Value::nil();
  
  - name: DRAWPOLYLINESEX
    map_to: DrawPolyLinesEx
    args: [double, double, double, int, double, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255};
      ::DrawPolyLinesEx(center, args[3].as_int(), (float)args[4].as_number(), (float)args[5].as_number(), (float)args[6].as_number(), c);
      return Value::nil();
