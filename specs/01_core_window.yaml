# Core Window Management - Simple Types Only
# These functions handle window creation, management, and basic setup
# Following best practices: simple types only for reliability

functions:
  # === WINDOW CREATION & MANAGEMENT ===
  - name: INITWINDOW
    raylib_name: InitWindow
    args: [int, int, string]
    ret: void
    category: window
    description: "Initialize window and OpenGL context"
    working: true

  - name: CLOSEWINDOW
    raylib_name: CloseWindow
    args: []
    ret: void
    category: window
    description: "Close window and unload OpenGL context"
    working: true

  - name: WINDOWSHOULDCLOSE
    raylib_name: WindowShouldClose
    args: []
    ret: bool
    category: window
    description: "Check if window should close"
    working: true

  - name: ISWINDOWREADY
    raylib_name: IsWindowReady
    args: []
    ret: bool
    category: window
    description: "Check if window has been initialized successfully"
    working: true

  - name: ISWINDOWFULLSCREEN
    raylib_name: IsWindowFullscreen
    args: []
    ret: bool
    category: window
    description: "Check if window is currently fullscreen"
    working: true

  - name: ISWINDOWHIDDEN
    raylib_name: IsWindowHidden
    args: []
    ret: bool
    category: window
    description: "Check if window is currently hidden"
    working: true

  - name: ISWINDOWMINIMIZED
    raylib_name: IsWindowMinimized
    args: []
    ret: bool
    category: window
    description: "Check if window is currently minimized"
    working: true

  - name: ISWINDOWMAXIMIZED
    raylib_name: IsWindowMaximized
    args: []
    ret: bool
    category: window
    description: "Check if window is currently maximized"
    working: true

  - name: ISWINDOWFOCUSED
    raylib_name: IsWindowFocused
    args: []
    ret: bool
    category: window
    description: "Check if window is currently focused"
    working: true

  - name: ISWINDOWRESIZED
    raylib_name: IsWindowResized
    args: []
    ret: bool
    category: window
    description: "Check if window has been resized last frame"
    working: true

  - name: ISWINDOWSTATE
    raylib_name: IsWindowState
    args: [int]
    ret: bool
    category: window
    description: "Check if one specific window flag is enabled"
    working: true

  # === WINDOW PROPERTIES ===
  - name: SETWINDOWTITLE
    raylib_name: SetWindowTitle
    args: [string]
    ret: void
    category: window
    description: "Set title for window"
    working: true

  - name: SETWINDOWMINIMUMSIZE
    raylib_name: SetWindowMinSize
    args: [int, int]
    ret: void
    category: window
    description: "Set minimum window dimensions"
    working: true

  - name: SETWINDOWPOSITION
    raylib_name: SetWindowPosition
    args: [int, int]
    ret: void
    category: window
    description: "Set window position on screen"
    working: true

  - name: SETWINDOWMONITOR
    raylib_name: SetWindowMonitor
    args: [int]
    ret: void
    category: window
    description: "Set monitor for the current window"
    working: true

  - name: SETWINDOWSTATE
    raylib_name: SetWindowState
    args: [int]
    ret: void
    category: window
    description: "Set window configuration state"
    working: true

  # === WINDOW INFO ===
  - name: GETMONITORCOUNT
    raylib_name: GetMonitorCount
    args: []
    ret: int
    category: window
    description: "Get number of connected monitors"
    working: true

  - name: GETMONITORWIDTH
    raylib_name: GetMonitorWidth
    args: [int]
    ret: int
    category: window
    description: "Get specified monitor width"
    working: true

  - name: GETMONITORHEIGHT
    raylib_name: GetMonitorHeight
    args: [int]
    ret: int
    category: window
    description: "Get specified monitor height"
    working: true

  - name: GETMONITORPHYSICALWIDTH
    raylib_name: GetMonitorPhysicalWidth
    args: [int]
    ret: int
    category: window
    description: "Get specified monitor physical width in millimetres"
    working: true

  - name: GETMONITORPHYSICALHEIGHT
    raylib_name: GetMonitorPhysicalHeight
    args: [int]
    ret: int
    category: window
    description: "Get specified monitor physical height in millimetres"
    working: true

  - name: GETMONITORREFRESHRATE
    raylib_name: GetMonitorRefreshRate
    args: [int]
    ret: int
    category: window
    description: "Get specified monitor refresh rate"
    working: true

  - name: GETCURRENTMONITOR
    raylib_name: GetCurrentMonitor
    args: []
    ret: int
    category: window
    description: "Get current connected monitor"
    working: true

  # === RENDERING CONTROL ===
  - name: BEGINDRAWING
    raylib_name: BeginDrawing
    args: []
    ret: void
    category: window
    description: "Setup canvas (framebuffer) to start drawing"
    working: true

  - name: ENDDRAWING
    raylib_name: EndDrawing
    args: []
    ret: void
    category: window
    description: "End canvas drawing and swap buffers"
    working: true

  - name: BEGINBLENDMODE
    raylib_name: BeginBlendMode
    args: [int]
    ret: void
    category: window
    description: "Begin blending mode"
    working: true

  - name: ENDBLENDMODE
    raylib_name: EndBlendMode
    args: []
    ret: void
    category: window
    description: "End blending mode"
    working: true

  # === FRAME CONTROL ===
  - name: SETTARGETFPS
    raylib_name: SetTargetFPS
    args: [int]
    ret: void
    category: window
    description: "Set target FPS (maximum)"
    working: true

  - name: GETFPS
    raylib_name: GetFPS
    args: []
    ret: int
    category: window
    description: "Get current FPS"
    working: true

  - name: GETFRAMETIME
    raylib_name: GetFrameTime
    args: []
    ret: float
    category: window
    description: "Get time in seconds for last frame drawn"
    working: true

  - name: GETTIME
    raylib_name: GetTime
    args: []
    ret: double
    category: window
    description: "Get elapsed time in seconds since InitWindow()"
    working: true
