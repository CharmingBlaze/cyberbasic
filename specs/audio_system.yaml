functions:
  # === AUDIO & SOUND SYSTEM ===
  - name: LOADSOUND
    map_to: LoadSound
    args: [string]
    ret: int
    custom_body: |
      ::Sound sound = ::LoadSound(args[0].as_string().c_str());
      int id = rlreg::next_sound_id++;
      rlreg::sounds[id] = sound;
      return Value::from_int(id);
  
  - name: UNLOADSOUND
    map_to: UnloadSound
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::UnloadSound(it->second);
        rlreg::sounds.erase(it);
      }
      return Value::nil();
  
  - name: PLAYSOUND
    map_to: PlaySound
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::PlaySound(it->second);
      }
      return Value::nil();
  
  - name: STOPSOUND
    map_to: StopSound
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::StopSound(it->second);
      }
      return Value::nil();
  
  - name: PAUSESOUND
    map_to: PauseSound
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::PauseSound(it->second);
      }
      return Value::nil();
  
  - name: RESUMESOUND
    map_to: ResumeSound
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::ResumeSound(it->second);
      }
      return Value::nil();
  
  - name: SETSOUNDVOLUME
    map_to: SetSoundVolume
    args: [int, double]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      float volume = (float)args[1].as_number();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        ::SetSoundVolume(it->second, volume);
      }
      return Value::nil();
  
  - name: ISSOUNDPLAYING
    map_to: IsSoundPlaying
    args: [int]
    ret: bool
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::sounds.find(id);
      if (it != rlreg::sounds.end()) {
        return Value::from_bool(::IsSoundPlaying(it->second));
      }
      return Value::from_bool(false);
  
  - name: LOADMUSIC
    map_to: LoadMusicStream
    args: [string]
    ret: int
    custom_body: |
      ::Music music = ::LoadMusicStream(args[0].as_string().c_str());
      int id = rlreg::next_music_id++;
      rlreg::musics[id] = music;
      return Value::from_int(id);
  
  - name: UNLOADMUSIC
    map_to: UnloadMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::UnloadMusicStream(it->second);
        rlreg::musics.erase(it);
      }
      return Value::nil();
  
  - name: PLAYMUSIC
    map_to: PlayMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::PlayMusicStream(it->second);
      }
      return Value::nil();
  
  - name: STOPMUSIC
    map_to: StopMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::StopMusicStream(it->second);
      }
      return Value::nil();
  
  - name: PAUSEMUSIC
    map_to: PauseMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::PauseMusicStream(it->second);
      }
      return Value::nil();
  
  - name: RESUMEMUSIC
    map_to: ResumeMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::ResumeMusicStream(it->second);
      }
      return Value::nil();
  
  - name: SETMUSICVOLUME
    map_to: SetMusicVolume
    args: [int, double]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      float volume = (float)args[1].as_number();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::SetMusicVolume(it->second, volume);
      }
      return Value::nil();
  
  - name: SETMUSICPITCH
    map_to: SetMusicPitch
    args: [int, double]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      float pitch = (float)args[1].as_number();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::SetMusicPitch(it->second, pitch);
      }
      return Value::nil();
  
  - name: UPDATEMUSIC
    map_to: UpdateMusicStream
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        ::UpdateMusicStream(it->second);
      }
      return Value::nil();
  
  - name: ISMUSICPLAYING
    map_to: IsMusicStreamPlaying
    args: [int]
    ret: bool
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::musics.find(id);
      if (it != rlreg::musics.end()) {
        return Value::from_bool(::IsMusicStreamPlaying(it->second));
      }
      return Value::from_bool(false);
