functions:
  # === CORE GRAPHICS & WINDOW MANAGEMENT ===
  - name: INITWINDOW
    map_to: InitWindow
    args: [int, int, string]
    ret: void
  
  - name: CLOSEWINDOW
    map_to: CloseWindow
    args: []
    ret: void
  
  - name: WINDOWSHOULDCLOSE
    map_to: WindowShouldClose
    args: []
    ret: bool
  
  - name: ISWINDOWREADY
    map_to: IsWindowReady
    args: []
    ret: bool
  
  - name: ISWINDOWFULLSCREEN
    map_to: IsWindowFullscreen
    args: []
    ret: bool
  
  - name: ISWINDOWHIDDEN
    map_to: IsWindowHidden
    args: []
    ret: bool
  
  - name: ISWINDOWMINIMIZED
    map_to: IsWindowMinimized
    args: []
    ret: bool
  
  - name: SETTARGETFPS
    map_to: SetTargetFPS
    args: [int]
    ret: void
  
  - name: GETFPS
    map_to: GetFPS
    args: []
    ret: int
  
  - name: GETDELTATIME
    map_to: GetFrameTime
    args: []
    ret: double
  
  - name: GETTIME
    map_to: GetTime
    args: []
    ret: double
  
  - name: BEGINDRAW
    map_to: BeginDrawing
    args: []
    ret: void
  
  - name: ENDDRAW
    map_to: EndDrawing
    args: []
    ret: void
  
  - name: CLEARBACKGROUND
    map_to: ClearBackground
    args: [Color]
    ret: void
  
  - name: DRAWTEXT
    map_to: DrawText
    args: [string, int, int, int, Color]
    ret: void
  
  - name: DRAWCIRCLE
    map_to: DrawCircle
    args: [int, int, int, Color]
    ret: void
  
  - name: DRAWRECTANGLE
    map_to: DrawRectangle
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWTRIANGLE
    map_to: DrawTriangle
    args: [Vector2, Vector2, Vector2, Color]
    ret: void
  
  - name: DRAWLINES
    map_to: DrawLine
    args: [int, int, int, int, Color]
    ret: void
  
  - name: DRAWPIXEL
    map_to: DrawPixel
    args: [int, int, int, int, int]
    ret: void
  
  - name: DRAWPIXELV
    map_to: DrawPixelV
    args: [int, int, int, int, int]
    ret: void
  
  - name: DRAWLINE
    map_to: DrawLine
    args: [int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWLINEV
    map_to: DrawLineV
    args: [int, int, int, int, int]
    ret: void
  
  - name: DRAWCIRCLEV
    map_to: DrawCircleV
    args: [int, int, int, int, int, int]
    ret: void
  
  - name: DRAWCIRCLELINES
    map_to: DrawCircleLines
    args: [int, int, int, int, int, int]
    ret: void
  
  - name: DRAWCIRCLELINESV
    map_to: DrawCircleLinesV
    args: [int, int, int, int, int, int]
    ret: void
  
  - name: DRAWRECTANGLEV
    map_to: DrawRectangleV
    args: [int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWRECTANGLELINES
    map_to: DrawRectangleLines
    args: [int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWRECTANGLELINESEX
    map_to: DrawRectangleLinesEx
    args: [int, int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWRECTANGLEROUNDED
    map_to: DrawRectangleRounded
    args: [int, int, int, int, double, int, int, int]
    ret: void
  
  - name: DRAWRECTANGLEROUNDEDLINES
    map_to: DrawRectangleRoundedLines
    args: [int, int, int, int, double, int, int, int, int]
    ret: void
  
  - name: DRAWELLIPSE
    map_to: DrawEllipse
    args: [int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWELLIPSELINES
    map_to: DrawEllipseLines
    args: [int, int, int, int, int, int, int]
    ret: void
  
  - name: DRAWPOLY
    map_to: DrawPoly
    args: [double, double, double, int, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255};
      ::DrawPoly(center, args[3].as_int(), (float)args[4].as_number(), 0.0f, c);
      return Value::nil();
  
  - name: DRAWPOLYLINES
    map_to: DrawPolyLines
    args: [double, double, double, int, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[6].as_int(), (unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), 255};
      ::DrawPolyLines(center, args[3].as_int(), (float)args[4].as_number(), 0.0f, c);
      return Value::nil();
  
  - name: DRAWPOLYLINESEX
    map_to: DrawPolyLinesEx
    args: [double, double, double, int, double, double, int, int, int]
    ret: void
    custom_body: |
      ::Vector2 center{(float)args[0].as_number(), (float)args[1].as_number()};
      ::Color c{(unsigned char)args[7].as_int(), (unsigned char)args[8].as_int(), (unsigned char)args[9].as_int(), 255};
      ::DrawPolyLinesEx(center, args[3].as_int(), (float)args[4].as_number(), (float)args[5].as_number(), (float)args[6].as_number(), c);
      return Value::nil();
