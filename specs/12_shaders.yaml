# Shader System Functions
# Shader loading, compilation, and usage
# Following best practices: proper shader handling

functions:
  # === SHADER LOADING ===
  - name: LOADSHADER
    raylib_name: LoadShader
    args: [string, string]
    ret: shader
    category: shaders
    description: "Load shader from files (vertex shader file, fragment shader file)"
    working: true
    custom_body: "LoadShader(args[0].as_string().c_str(), args[1].as_string().c_str())"

  - name: LOADSHADERFROMMEMORY
    raylib_name: LoadShaderFromMemory
    args: [string, string]
    ret: shader
    category: shaders
    description: "Load shader from memory strings (vertex shader code, fragment shader code)"
    working: true
    custom_body: "LoadShaderFromMemory(args[0].as_string().c_str(), args[1].as_string().c_str())"

  - name: UNLOADSHADER
    raylib_name: UnloadShader
    args: [int]
    ret: void
    category: shaders
    description: "Unload shader (pass shader ID)"
    working: true
    custom_body: "UnloadShader(*(Shader*)args[0].as_int())"



  # === SHADER UNIFORMS ===
  - name: GETSHADERLOCATION
    raylib_name: GetShaderLocation
    args: [int, string]
    ret: int
    category: shaders
    description: "Get shader uniform location (pass shader ID, uniform name)"
    working: true
    custom_body: "GetShaderLocation(*(Shader*)args[0].as_int(), args[1].as_string().c_str())"

  - name: GETSHADERLOCATIONATTRIB
    raylib_name: GetShaderLocationAttrib
    args: [int, string]
    ret: int
    category: shaders
    description: "Get shader attribute location (pass shader ID, attribute name)"
    working: true
    custom_body: "GetShaderLocationAttrib(*(Shader*)args[0].as_int(), args[1].as_string().c_str())"

  # === SHADER UNIFORM SETTING ===
  - name: SETSHADERVALUE
    raylib_name: SetShaderValue
    args: [int, int, int, int]
    ret: void
    category: shaders
    description: "Set shader uniform value (pass shader ID, uniform location, value pointer, uniform type)"
    working: true
    custom_body: "SetShaderValue(*(Shader*)args[0].as_int(), args[1].as_int(), (const void*)args[2].as_int(), args[3].as_int())"

  - name: SETSHADERVALUEV
    raylib_name: SetShaderValueV
    args: [int, int, int, int, int]
    ret: void
    category: shaders
    description: "Set shader uniform array value (pass shader ID, uniform location, value pointer, uniform type, count)"
    working: true
    custom_body: "SetShaderValueV(*(Shader*)args[0].as_int(), args[1].as_int(), (const void*)args[2].as_int(), args[3].as_int(), args[4].as_int())"



  - name: SETSHADERVALUEMATRIX
    raylib_name: SetShaderValueMatrix
    args: [int, int, int]
    ret: void
    category: shaders
    description: "Set shader uniform matrix value (pass shader ID, uniform location, matrix pointer)"
    working: true
    custom_body: "SetShaderValueMatrix(*(Shader*)args[0].as_int(), args[1].as_int(), *(Matrix*)args[2].as_int())"

  - name: SETSHADERVALUETEXTURE
    raylib_name: SetShaderValueTexture
    args: [int, int, int]
    ret: void
    category: shaders
    description: "Set shader uniform texture value (pass shader ID, uniform location, texture ID)"
    working: true
    custom_body: "SetShaderValueTexture(*(Shader*)args[0].as_int(), args[1].as_int(), *(Texture2D*)args[2].as_int())"

  # === SHADER USAGE ===
  - name: BEGINSHADERMODE
    raylib_name: BeginShaderMode
    args: [int]
    ret: void
    category: shaders
    description: "Begin custom shader drawing (pass shader ID)"
    working: true
    custom_body: "BeginShaderMode(*(Shader*)args[0].as_int())"

  - name: ENDSHADERMODE
    raylib_name: EndShaderMode
    args: []
    ret: void
    category: shaders
    description: "End custom shader drawing"
    working: true
    custom_body: "EndShaderMode()"






