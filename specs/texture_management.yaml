functions:
  # === TEXTURE & IMAGE MANAGEMENT ===
  - name: LOADIMAGE
    map_to: LoadImage
    args: [string]
    ret: int
    custom_body: |
      ::Image image = ::LoadImage(args[0].as_string().c_str());
      int id = rlreg::next_image_id++;
      rlreg::images[id] = image;
      return Value::from_int(id);
  
  - name: UNLOADIMAGE
    map_to: UnloadImage
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::UnloadImage(it->second);
        rlreg::images.erase(it);
      }
      return Value::nil();
  
  - name: LOADTEXTURE
    map_to: LoadTexture
    args: [string]
    ret: int
    custom_body: |
      ::Texture2D texture = ::LoadTexture(args[0].as_string().c_str());
      int id = rlreg::next_tex_id++;
      rlreg::textures[id] = texture;
      return Value::from_int(id);
  
  - name: UNLOADTEXTURE
    map_to: UnloadTexture
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::UnloadTexture(it->second);
        rlreg::textures.erase(it);
      }
      return Value::nil();
  
  - name: DRAWTEXTURE
    map_to: DrawTexture
    args: [int, int, int, int, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int x = args[1].as_int();
      int y = args[2].as_int();
      int width = args[3].as_int();
      int height = args[4].as_int();
      ::Color tint{(unsigned char)args[5].as_int(), (unsigned char)args[6].as_int(), 255, 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Rectangle source{0, 0, (float)it->second.width, (float)it->second.height};
        ::Rectangle dest{(float)x, (float)y, (float)width, (float)height};
        ::Vector2 origin{0, 0};
        ::DrawTexturePro(it->second, source, dest, origin, 0.0f, tint);
      }
  
  - name: DRAWTEXTUREPRO
    map_to: DrawTexturePro
    args: [int, int, int, int, int, int, int, int, double, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int src_x = args[1].as_int();
      int src_y = args[2].as_int();
      int src_w = args[3].as_int();
      int src_h = args[4].as_int();
      int dest_x = args[5].as_int();
      int dest_y = args[6].as_int();
      int dest_w = args[7].as_int();
      int dest_h = args[8].as_int();
      float rotation = (float)args[9].as_number();
      ::Color tint{(unsigned char)args[10].as_int(), (unsigned char)args[11].as_int(), (unsigned char)args[12].as_int(), 255};
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        ::Rectangle source{(float)src_x, (float)src_y, (float)src_w, (float)src_h};
        ::Rectangle dest{(float)dest_x, (float)dest_y, (float)dest_w, (float)dest_h};
        ::Vector2 origin{(float)dest_w/2, (float)dest_h/2};
        ::DrawTexturePro(it->second, source, dest, origin, rotation, tint);
      }
  
  - name: GETTEXTUREWIDTH
    map_to: GetTextureWidth
    args: [int]
    ret: int
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        return Value::from_int(it->second.width);
      }
      return Value::from_int(0);
  
  - name: GETTEXTUREHEIGHT
    map_to: GetTextureHeight
    args: [int]
    ret: int
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::textures.find(id);
      if (it != rlreg::textures.end()) {
        return Value::from_int(it->second.height);
      }
      return Value::from_int(0);
  
  - name: IMAGEFROMTEXTURE
    map_to: GetTextureData
    args: [int]
    ret: int
    custom_body: |
      // GetTextureData not available in current Raylib version
      // Return -1 to indicate failure
      return Value::from_int(-1);
  
  - name: TEXTUREFROMIMAGE
    map_to: LoadTextureFromImage
    args: [int]
    ret: int
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::Texture2D texture = ::LoadTextureFromImage(it->second);
        int texture_id = rlreg::next_tex_id++;
        rlreg::textures[texture_id] = texture;
        return Value::from_int(texture_id);
      }
      return Value::from_int(-1);
  
  - name: RESIZEIMAGE
    map_to: ImageResize
    args: [int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int new_width = args[1].as_int();
      int new_height = args[2].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::ImageResize(&it->second, new_width, new_height);
      }
      return Value::nil();
  
  - name: CROPIMAGE
    map_to: ImageCrop
    args: [int, int, int, int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int x = args[1].as_int();
      int y = args[2].as_int();
      int width = args[3].as_int();
      int height = args[4].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::Rectangle crop{(float)x, (float)y, (float)width, (float)height};
        ::ImageCrop(&it->second, crop);
      }
      return Value::nil();
  
  - name: FLIPIMAGE
    map_to: ImageFlipVertical
    args: [int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::ImageFlipVertical(&it->second);
      }
      return Value::nil();
  
  - name: ROTATEIMAGE
    map_to: ImageRotate
    args: [int, int]
    ret: void
    custom_body: |
      int id = args[0].as_int();
      int degrees = args[1].as_int();
      auto it = rlreg::images.find(id);
      if (it != rlreg::images.end()) {
        ::ImageRotate(&it->second, degrees);
      }
      return Value::nil();
